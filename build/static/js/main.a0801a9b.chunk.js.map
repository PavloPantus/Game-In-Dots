{"version":3,"sources":["components/Leader/index.js","components/Leader/Leader.js","API.js","store/LeadersReducer.js","components/LeaderBord/index.js","components/LeaderBord/LeaderBord.js","store/GamePresetsReducer.js","store/StartGameReducer.js","store/ActiveRandomSquareReducer.js","store/userWonIndexesReducer.js","store/userLostIndexesReducer.js","store/CurrentGameModeReducer.js","store/ShowResultsReducer.js","store/SetWinnerReducer.js","store/CurrentPlayerReducer.js","components/Game-Board/index.js","components/Game-Board/Game-Board.js","App.js","store/index.js","index.js"],"names":["connect","state","_ref","leader","react_default","a","createElement","className","winner","date","baseUrl","getData","url","response","data","regenerator_default","async","_context","prev","next","awrap","fetch","concat","sent","json","abrupt","stop","getLeaders","leaders","loadLeadrs","dispatch","then","winners","type","payload","catch","finally","mapDispatchToProps","loadLeaders","useEffect","slice","map","components_Leader","key","id","getPresets","presets","getGameStarted","gameStarted","setGameStarted","getActiveRandomSuqare","activeRandomSquare","getUserWonIndexes","userWonIndexes","clearUserWonIndexes","getUserLostIndexes","userLostIndexes","clearUserLostIndexes","getCurrentGameMode","currentGameMode","getShowResults","showResults","setShowResults","getWinner","getCurrentPlayer","currentPlayer","setActiveRandomSquare","updateUserWonIndexes","updateUserLostIndexes","setWinner","sendWinnerInfoToServer","_context2","method","body","JSON","stringify","headers","Content-Type","console","log","sendWinnerToServer","_useState","useState","document","documentElement","clientWidth","squareSize","Object","slicedToArray","notUsedIndexes","useMemo","indexes","i","Math","pow","field","push","gameProcess","maxNumber","lengthOfNotUsedIndexes","length","lengthOfUserLostIndexes","lengthOfUserWonIndexes","floor","fullDate","Date","toLocaleString","error","filteredItemsBefore","filter","item","indexOf","randomBefore","random","setInterval","delay","clearInterval","style","gridGap","gridTemplateColumns","square","index","width","height","classNames","active-random","user-won-square","includes","user-lost-square","onMouseDown","loadPresets","settings","setCurrentGameMode","setCurrentPlayer","selectRef","useRef","inputRef","ref","onChange","event","target","value","required","keys","easyMode","normalMode","hardMode","placeholder","onClick","current","focus","components_Game_Board","components_LeaderBord","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.a0801a9b.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { Leader } from './Leader';\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = {\n\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Leader);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Leader = ({ leader }) => (\n  <div className=\"leader\">\n    <span className=\"leader__name\">{leader.winner}</span>\n    <span className=\"leader__date\">{leader.date}</span>\n  </div>\n);\n\nLeader.propTypes = {\n  leader: PropTypes.shape({\n    winner: PropTypes.string,\n    date: PropTypes.string,\n  }).isRequired,\n};\n","const baseUrl = 'https://starnavi-frontend-test-task.herokuapp.com';\n\nconst getData = async(url) => {\n  const response = await fetch(`${baseUrl}/${url}`);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getWinnersFromServer = () => getData('winners');\n\nexport const getGameSettingsFromServer = () => getData('game-settings');\n\nconst sendWinnerToServer = async(data) => {\n  const response = await fetch(`${baseUrl}/winners`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const json = await response.json();\n\n  console.log('Успено отправлено на сервер');\n\n  return json;\n};\n\nexport const sendWinnerInfoToServer = data => dispatch => (\n  sendWinnerToServer(data)\n);\n","import { getWinnersFromServer } from '../API';\n\nconst UPDATE_LEADERS = 'UPDATE_LEADERS';\n\nexport const getLeaders = state => state.leaders;\n\nconst updateLeaders = payload => ({\n  type: UPDATE_LEADERS,\n  payload,\n});\n\nexport const loadLeadrs = () => (dispatch) => {\n  getWinnersFromServer()\n    .then(\n      (winners) => {\n        dispatch(\n          updateLeaders(winners)\n        );\n      }\n    )\n    .catch()\n    .finally();\n};\n\nexport const LeadersReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_LEADERS: return action.payload;\n    default: return state;\n  }\n};\n","import { connect } from 'react-redux';\nimport { LeadeBord } from './LeaderBord';\nimport { getLeaders, loadLeadrs } from '../../store/LeadersReducer';\n\nconst mapStateToProps = state => ({\n  leaders: getLeaders(state),\n});\n\nconst mapDispatchToProps = {\n  loadLeaders: loadLeadrs,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LeadeBord);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Leader from '../Leader';\nimport './LeaderBord.scss';\n\nexport const LeadeBord = ({ leaders, loadLeaders }) => {\n  useEffect(\n    () => {\n      loadLeaders();\n    }, [loadLeaders]\n  );\n\n  return (\n    <section className=\"leaders-bord\">\n      <h2 className=\"leaders-bord__heading\">\n                Leader Bord\n      </h2>\n      {leaders.slice(-15).map(\n        leader => <Leader key={leader.id} leader={leader} />\n      )}\n    </section>\n\n  );\n};\n\nLeadeBord.propTypes = {\n  leaders: PropTypes.arrayOf(\n    PropTypes.object\n  ).isRequired,\n  loadLeaders: PropTypes.func.isRequired,\n};\n","import { getGameSettingsFromServer } from '../API';\n\nconst SET_PRESETS = 'SET_PRESETS';\n\nexport const getPresets = state => state.presets;\n\nconst setPresets = payload => ({\n  type: SET_PRESETS,\n  payload,\n});\n\nexport const loadPresets = () => (dispatch) => {\n  getGameSettingsFromServer()\n    .then(\n      (settings) => {\n        dispatch(\n          setPresets(settings)\n        );\n      }\n    )\n    .catch()\n    .finally();\n};\n\nexport const PresetsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_PRESETS: return action.payload;\n    default: return state;\n  }\n};\n","const SET_GAME_STARTED = 'SET_GAME_STARTED';\n\nexport const getGameStarted = state => state.gameStarted;\n\nexport const setGameStarted = payload => ({\n  type: SET_GAME_STARTED,\n  payload,\n});\n\nexport const StartGameReducer = (state = false, action) => {\n  switch (action.type) {\n    case SET_GAME_STARTED: return action.payload;\n    default: return state;\n  }\n};\n","const SET_RANDOM_SQUARE = 'SET_RANDOM_SQUARE';\n\nexport const getActiveRandomSuqare = state => state.activeRandomSquare;\n\nexport const setActiveRandomSquare = payload => ({\n  type: SET_RANDOM_SQUARE,\n  payload,\n});\n\nexport const ActiveRandomSquareReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_RANDOM_SQUARE: return action.payload;\n    default: return state;\n  }\n};\n","const UPDATE_USER_WON_INDEXES = 'UPDATE_USER_WON_INDEXES';\nconst CLEAR_USER_WON_INDEXES = 'CLEAR_USER_WON_INDEXES';\n\nexport const getUserWonIndexes = state => state.userWonIndexes;\n\nexport const updateUserWonIndexes = payload => ({\n  type: UPDATE_USER_WON_INDEXES,\n  payload,\n});\n\nexport const clearUserWonIndexes = payload => ({\n  type: CLEAR_USER_WON_INDEXES,\n  payload,\n});\n\nexport const UserWonIndexesReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_USER_WON_INDEXES: return [...state, action.payload];\n    case CLEAR_USER_WON_INDEXES: return [];\n    default: return state;\n  }\n};\n","const UPDATE_USER_LOST_INDEXES = 'UPDATE_USER_LOST_INDEXES';\nconst CLEAR_USER_LOST_INDEXES = 'CLEAR_USER_LOST_INDEXES';\n\nexport const getUserLostIndexes = state => state.userLostIndexes;\n\nexport const updateUserLostIndexes = payload => ({\n  type: UPDATE_USER_LOST_INDEXES,\n  payload,\n});\n\nexport const clearUserLostIndexes = payload => ({\n  type: CLEAR_USER_LOST_INDEXES,\n  payload,\n});\n\nexport const UserLostIndexesReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_USER_LOST_INDEXES: return [...state, action.payload];\n    case CLEAR_USER_LOST_INDEXES: return [];\n    default: return state;\n  }\n};\n","const UPDATE_CURRENT_GAME_MODE = 'UPDATE_CURRENT_GAME_MODE';\n\nexport const getCurrentGameMode = state => state.currentGameMode;\n\nexport const setCurrentGameMode = payload => ({\n  type: UPDATE_CURRENT_GAME_MODE,\n  payload,\n});\n\nexport const CurrentGameModeReducer = (state = '', action) => {\n  switch (action.type) {\n    case UPDATE_CURRENT_GAME_MODE: return action.payload;\n    default: return state;\n  }\n};\n","const SET_SHOW_RESULTS = 'SET_SHOW_RESULTS';\n\nexport const getShowResults = state => state.showResults;\n\nexport const setShowResults = payload => ({\n  type: SET_SHOW_RESULTS,\n  payload,\n});\n\nexport const ShowResultsReducer = (state = false, action) => {\n  switch (action.type) {\n    case SET_SHOW_RESULTS: return action.payload;\n    default: return state;\n  }\n};\n","const SET_WINNER = 'SET_WINNER';\n\nexport const getWinner = state => state.winner;\n\nexport const setWinner = payload => ({\n  type: SET_WINNER,\n  payload,\n});\n\nexport const SetWinnerReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_WINNER: return action.payload;\n    default: return state;\n  }\n};\n","const UPDATE_CURRENT_PLAYER = 'UPDATE_CURRENT_PLAYER';\n\nexport const getCurrentPlayer = state => state.currentPlayer;\n\nexport const setCurrentPlayer = payload => ({\n  type: UPDATE_CURRENT_PLAYER,\n  payload,\n});\n\nexport const CurrentPlayerReducer = (state = '', action) => {\n  switch (action.type) {\n    case UPDATE_CURRENT_PLAYER: return action.payload;\n    default: return state;\n  }\n};\n","import { connect } from 'react-redux';\nimport { GameBoard } from './Game-Board';\nimport {\n  getGameStarted,\n  setGameStarted,\n} from '../../store/StartGameReducer';\nimport {\n  setActiveRandomSquare,\n  getActiveRandomSuqare,\n} from '../../store/ActiveRandomSquareReducer';\nimport {\n  getUserWonIndexes,\n  updateUserWonIndexes,\n  clearUserWonIndexes,\n} from '../../store/userWonIndexesReducer';\nimport {\n  getUserLostIndexes,\n  updateUserLostIndexes,\n  clearUserLostIndexes,\n} from '../../store/userLostIndexesReducer';\nimport { getCurrentGameMode } from '../../store/CurrentGameModeReducer';\nimport { getPresets } from '../../store/GamePresetsReducer';\nimport { setShowResults } from '../../store/ShowResultsReducer';\nimport { setWinner } from '../../store/SetWinnerReducer';\nimport { getCurrentPlayer } from '../../store/CurrentPlayerReducer';\nimport { sendWinnerInfoToServer } from '../../API';\nimport { loadLeadrs } from '../../store/LeadersReducer';\n\nconst mapStateToProps = state => ({\n  gameStarted: getGameStarted(state),\n  activeRandomSquare: getActiveRandomSuqare(state),\n  userWonIndexes: getUserWonIndexes(state),\n  userLostIndexes: getUserLostIndexes(state),\n  currentGameMode: getCurrentGameMode(state),\n  presets: getPresets(state),\n  currentPlayer: getCurrentPlayer(state),\n});\n\nconst mapDispatchToProps = {\n  setGameStarted,\n  setActiveRandomSquare,\n  updateUserWonIndexes,\n  updateUserLostIndexes,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n  setShowResults,\n  setWinner,\n  sendWinnerInfoToServer,\n  loadLeadrs,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GameBoard);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './Game-Board.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const GameBoard = ({\n  currentGameMode,\n  gameStarted,\n  setGameStarted,\n  setActiveRandomSquare,\n  activeRandomSquare,\n  updateUserWonIndexes,\n  userWonIndexes,\n  updateUserLostIndexes,\n  userLostIndexes,\n  presets,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n  setShowResults,\n  setWinner,\n  currentPlayer,\n  sendWinnerInfoToServer,\n  loadLeadrs,\n}) => {\n  const [squareSize] = useState(\n    (document.documentElement.clientWidth > 700) ? '30px' : '20px'\n  );\n\n  const notUsedIndexes = useMemo(() => {\n    const indexes = [];\n\n    for (\n      let i = 0;\n      i < (currentGameMode ? presets[currentGameMode].field : 5) ** 2;\n      i += 1) {\n      indexes.push(i);\n    }\n\n    return indexes;\n  }, [currentGameMode, presets]);\n\n  const getRandom = maxNumber => Math.floor(Math.random() * maxNumber);\n\n  useEffect(() => {\n    let gameProcess;\n\n    if (gameStarted) {\n      const lengthOfNotUsedIndexes = notUsedIndexes.length;\n      const lengthOfUserLostIndexes = userLostIndexes.length;\n      const lengthOfUserWonIndexes = userWonIndexes.length;\n\n      // cheking is game over\n\n      if (lengthOfUserLostIndexes > Math.floor(lengthOfNotUsedIndexes / 2)\n       || lengthOfUserWonIndexes > Math.floor(lengthOfNotUsedIndexes / 2)\n      ) {\n        setWinner(\n          lengthOfUserWonIndexes > lengthOfUserLostIndexes\n            ? currentPlayer : 'Computer'\n        );\n\n        clearUserWonIndexes();\n        clearUserLostIndexes();\n        setShowResults(true);\n        setGameStarted(false);\n\n        const date = new Date();\n        const fullDate = date.toLocaleString();\n\n        sendWinnerInfoToServer({\n          winner: userWonIndexes.length > userLostIndexes.length\n            ? currentPlayer : 'Computer',\n          date: fullDate,\n        })\n          .then(() => {\n            loadLeadrs();\n          }).catch(\n            (error) => {\n              console.log(error);\n            }\n          );\n      } else {\n        const filteredItemsBefore = notUsedIndexes.filter(\n          item => userWonIndexes.indexOf(item) === -1\n            && userLostIndexes.indexOf(item) === -1\n        );\n        const randomBefore = getRandom(filteredItemsBefore.length);\n\n        setActiveRandomSquare(\n          filteredItemsBefore[randomBefore]\n        );\n\n        gameProcess = setInterval(() => {\n          updateUserLostIndexes(filteredItemsBefore[randomBefore]);\n        }, currentGameMode ? presets[currentGameMode].delay : 1000);\n      }\n    }\n\n    return () => {\n      clearInterval(gameProcess);\n    };\n  }, [\n    gameStarted,\n    userWonIndexes,\n    userLostIndexes,\n    notUsedIndexes,\n    setActiveRandomSquare,\n    currentGameMode,\n    presets,\n    setWinner,\n    currentPlayer,\n    clearUserWonIndexes,\n    clearUserLostIndexes,\n    setShowResults,\n    setGameStarted,\n    sendWinnerInfoToServer,\n    loadLeadrs,\n    updateUserLostIndexes]);\n\n  return (\n    <section\n      style={{\n        gridGap: '0',\n        gridTemplateColumns: `repeat(${\n          currentGameMode ? presets[currentGameMode].field : 5\n        }, ${squareSize})`,\n      }}\n      className=\"game-board\"\n    >\n      {\n        notUsedIndexes.map(\n          (square, index) => (\n            // eslint-disable-next-line max-len\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n            <div\n              style={{\n                width: `${squareSize}`,\n                height: `${squareSize}`,\n              }}\n              key={square}\n              className={\n                classNames(\n                  'game-board__square',\n                  {\n                    'active-random': index === activeRandomSquare,\n                    'user-won-square': userWonIndexes.includes(index),\n                    'user-lost-square': userLostIndexes.includes(index),\n                  },\n\n                )\n              }\n              onMouseDown={() => {\n                if (index === activeRandomSquare) {\n                  updateUserWonIndexes(index);\n                }\n              }}\n            />\n          )\n        )\n      }\n    </section>\n  );\n};\n\nGameBoard.propTypes = {\n  currentGameMode: PropTypes.string.isRequired,\n  gameStarted: PropTypes.bool.isRequired,\n  setGameStarted: PropTypes.func.isRequired,\n  setActiveRandomSquare: PropTypes.func.isRequired,\n  activeRandomSquare: PropTypes.oneOfType(\n    [\n      PropTypes.string,\n      PropTypes.number,\n    ]\n  ).isRequired,\n  updateUserWonIndexes: PropTypes.func.isRequired,\n  userWonIndexes: PropTypes.arrayOf(\n    PropTypes.number\n  ).isRequired,\n  updateUserLostIndexes: PropTypes.func.isRequired,\n  userLostIndexes: PropTypes.arrayOf(\n    PropTypes.number\n  ).isRequired,\n  presets: PropTypes.shape({\n    easyMode: PropTypes.object,\n    normalMode: PropTypes.object,\n    hardMode: PropTypes.object,\n  }).isRequired,\n  clearUserWonIndexes: PropTypes.func.isRequired,\n  clearUserLostIndexes: PropTypes.func.isRequired,\n  setShowResults: PropTypes.func.isRequired,\n  setWinner: PropTypes.func.isRequired,\n  currentPlayer: PropTypes.string.isRequired,\n  sendWinnerInfoToServer: PropTypes.func.isRequired,\n  loadLeadrs: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-shadow */\nimport React, { useEffect, useRef } from 'react';\nimport './App.scss';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport LeaderBoard from './components/LeaderBord';\nimport { getPresets, loadPresets } from './store/GamePresetsReducer';\nimport GameBoard from './components/Game-Board';\nimport { getCurrentGameMode,\n  setCurrentGameMode } from './store/CurrentGameModeReducer';\nimport { getCurrentPlayer,\n  setCurrentPlayer } from './store/CurrentPlayerReducer';\nimport { setGameStarted } from './store/StartGameReducer';\nimport { setShowResults, getShowResults } from './store/ShowResultsReducer';\nimport { getWinner } from './store/SetWinnerReducer';\nimport { clearUserLostIndexes } from './store/userLostIndexesReducer';\nimport { clearUserWonIndexes } from './store/userWonIndexesReducer';\n\nfunction App({\n  loadPresets,\n  presets,\n  currentGameMode,\n  setCurrentGameMode,\n  currentPlayer,\n  setCurrentPlayer,\n  setGameStarted,\n  setShowResults,\n  showResults,\n  winner,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n}) {\n  useEffect(() => {\n    loadPresets();\n  }, [loadPresets]);\n\n  const handleGameModeChange = (event) => {\n    setGameStarted(false);\n    clearUserWonIndexes();\n    clearUserLostIndexes();\n    console.log(event.target.value);\n    setCurrentGameMode(event.target.value);\n  };\n\n  const handleCurrentPlayerInput = (event) => {\n    setCurrentPlayer(event.target.value);\n  };\n\n  const selectRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const handleStartGame = (event) => {\n    setShowResults(false);\n    clearUserWonIndexes();\n    clearUserLostIndexes();\n\n    if (currentGameMode === '') {\n      selectRef.current.focus();\n\n      return;\n    }\n\n    if (currentPlayer === '') {\n      inputRef.current.focus();\n\n      return;\n    }\n    setGameStarted(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <section className=\"game-section\">\n        <div className=\"game-section__select-game-parameters\">\n          <select\n            ref={selectRef}\n            onChange={handleGameModeChange}\n            value={currentGameMode}\n            className=\"game-section__select-game-mode\"\n            required\n          >\n            <option value=\"\">Pick game mode</option>\n            {Object.keys(presets).map(\n              key => (\n                <option\n                  key={key}\n                  value={key}\n                >\n                  {{\n                    easyMode: 'Easy Mode',\n                    normalMode: 'Normal Mode',\n                    hardMode: 'Hard Mode',\n                  }[key]}\n                </option>\n              )\n            )\n            }\n          </select>\n\n          <input\n            ref={inputRef}\n            className=\"game-section__input-player-name\"\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={currentPlayer}\n            onChange={handleCurrentPlayerInput}\n          />\n\n          <button\n            type=\"button\"\n            className=\"game-section__play-button\"\n            onClick={handleStartGame}\n          >\n            {winner ? 'PLAY AGAIN' : 'PLAY'}\n          </button>\n\n          {\n            showResults\n              && (\n                <div\n                  className=\"game-section__results\"\n                >\n                  {winner}\n                  {' '}\nwon!\n                </div>\n              )\n          }\n\n        </div>\n\n        <GameBoard />\n\n      </section>\n      <LeaderBoard />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  presets: getPresets(state),\n  currentGameMode: getCurrentGameMode(state),\n  currentPlayer: getCurrentPlayer(state),\n  showResults: getShowResults(state),\n  winner: getWinner(state),\n});\n\nconst mapDispatchToProps = {\n  loadPresets,\n  setCurrentGameMode,\n  setCurrentPlayer,\n  setGameStarted,\n  setShowResults,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nApp.propTypes = {\n  loadPresets: PropTypes.func.isRequired,\n  presets: PropTypes.shape({\n    easyMode: PropTypes.object,\n    normalMode: PropTypes.object,\n    hardMode: PropTypes.object,\n  }).isRequired,\n  currentGameMode: PropTypes.string.isRequired,\n  setCurrentGameMode: PropTypes.func.isRequired,\n  currentPlayer: PropTypes.string.isRequired,\n  setCurrentPlayer: PropTypes.func.isRequired,\n  setGameStarted: PropTypes.func.isRequired,\n  setShowResults: PropTypes.func.isRequired,\n  showResults: PropTypes.bool.isRequired,\n  winner: PropTypes.string.isRequired,\n  clearUserWonIndexes: PropTypes.func.isRequired,\n  clearUserLostIndexes: PropTypes.func.isRequired,\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { LeadersReducer } from './LeadersReducer';\nimport { PresetsReducer } from './GamePresetsReducer';\nimport { CurrentGameModeReducer } from './CurrentGameModeReducer';\nimport { CurrentPlayerReducer } from './CurrentPlayerReducer';\nimport { UserWonIndexesReducer } from './userWonIndexesReducer';\nimport { UserLostIndexesReducer } from './userLostIndexesReducer';\nimport { StartGameReducer } from './StartGameReducer';\nimport { ActiveRandomSquareReducer } from './ActiveRandomSquareReducer';\nimport { ShowResultsReducer } from './ShowResultsReducer';\nimport { SetWinnerReducer } from './SetWinnerReducer';\n\nconst rootReducer = combineReducers({\n  leaders: LeadersReducer,\n  presets: PresetsReducer,\n  currentGameMode: CurrentGameModeReducer,\n  currentPlayer: CurrentPlayerReducer,\n  userWonIndexes: UserWonIndexesReducer,\n  userLostIndexes: UserLostIndexesReducer,\n  gameStarted: StartGameReducer,\n  activeRandomSquare: ActiveRandomSquareReducer,\n  showResults: ShowResultsReducer,\n  winner: SetWinnerReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}