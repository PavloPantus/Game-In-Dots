{"version":3,"sources":["components/Leader/index.js","components/Leader/Leader.js","API.js","store/LeadersReducer.js","components/LeaderBord/index.js","components/LeaderBord/LeaderBord.js","store/GamePresetsReducer.js","store/StartGameReducer.js","store/NotUsedIndexesReducer.js","store/ActiveRandomSquareReducer.js","store/userWonIndexesReducer.js","store/userLostIndexesReducer.js","store/CurrentGameModeReducer.js","store/ShowResultsReducer.js","store/SetWinnerReducer.js","store/CurrentPlayerReducer.js","components/Game-Board/index.js","components/Game-Board/Game-Board.js","App.js","store/index.js","index.js"],"names":["connect","state","_ref","leader","react_default","a","createElement","className","winner","date","baseUrl","getData","url","response","data","regenerator_default","async","_context","prev","next","awrap","fetch","concat","sent","json","abrupt","stop","getLeaders","leaders","loadLeadrs","dispatch","then","winners","type","payload","catch","finally","mapDispatchToProps","loadLeaders","useEffect","slice","map","components_Leader","key","id","getPresets","presets","getGameStarted","gameStarted","setGameStarted","getNotUsedIndexes","notUsedIndexes","getActiveRandomSuqare","activeRandomSquare","getUserWonIndexes","userWonIndexes","clearUserWonIndexes","getUserLostIndexes","userLostIndexes","clearUserLostIndexes","getCurrentGameMode","currentGameMode","getShowResults","showResults","setShowResults","getWinner","getCurrentPlayer","currentPlayer","updateNotUsedIndexes","setActiveRandomSquare","updateUserWonIndexes","updateUserLostIndexes","setWinner","sendWinnerInfoToServer","_context2","method","body","JSON","stringify","headers","Content-Type","console","log","t0","error","sendWinnerToServer","arrayOfSquares","useMemo","squares","i","Math","pow","field","push","indexes","getRandom","maxNumber","floor","random","gameProcess","length","fullDate","Date","toLocaleString","filteredItemsBefore","filter","item","indexOf","randomBefore","setInterval","filteredItems","delay","clearInterval","style","gridGap","gridTemplateColumns","sqare","index","classNames","active-random","user-won-square","includes","user-lost-square","onClick","loadPresets","settings","setCurrentGameMode","setCurrentPlayer","selectRef","useRef","inputRef","ref","onChange","event","target","value","required","Object","keys","easyMode","normalMode","hardMode","placeholder","current","focus","components_Game_Board","components_LeaderBord","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e522b211.chunk.js","sourcesContent":["import { connect } from 'react-redux';\nimport { Leader } from './Leader';\n\nconst mapStateToProps = state => ({\n\n});\n\nconst mapDispatchToProps = {\n\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Leader);\n","import React from 'react';\n\nexport const Leader = ({ leader }) => (\n  <div className=\"leader\">\n    <span className=\"leader__name\">{leader.winner}</span>\n    <span className=\"leader__date\">{leader.date}</span>\n  </div>\n);\n","const baseUrl = 'https://starnavi-frontend-test-task.herokuapp.com';\n\nconst getData = async(url) => {\n  const response = await fetch(`${baseUrl}/${url}`);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getWinnersFromServer = () => getData('winners');\n\nexport const getGameSettingsFromServer = () => getData('game-settings');\n\nconst sendWinnerToServer = async(data) => {\n  try {\n    const response = await fetch(`${baseUrl}/winners`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const json = await response.json();\n\n    console.log('Успено отправлено на сервер');\n\n    return json;\n  } catch (error) {\n    console.error('Ошибка:', error);\n  }\n};\n\nexport const sendWinnerInfoToServer = data => dispatch => sendWinnerToServer(data);\n","import { getWinnersFromServer } from '../API';\n\nconst UPDATE_LEADERS = 'UPDATE_LEADERS';\n\nexport const getLeaders = state => state.leaders;\n\nconst updateLeaders = payload => ({\n  type: UPDATE_LEADERS,\n  payload,\n});\n\nexport const loadLeadrs = () => (dispatch) => {\n  getWinnersFromServer()\n    .then(\n      (winners) => {\n        dispatch(\n          updateLeaders(winners)\n        );\n      }\n    )\n    .catch()\n    .finally();\n};\n\nexport const LeadersReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_LEADERS: return action.payload;\n    default: return state;\n  }\n};\n","import { connect } from 'react-redux';\nimport { LeadeBord } from './LeaderBord';\nimport { getLeaders, loadLeadrs } from '../../store/LeadersReducer';\n\nconst mapStateToProps = state => ({\n  leaders: getLeaders(state),\n});\n\nconst mapDispatchToProps = {\n  loadLeaders: loadLeadrs,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LeadeBord);\n","import React, { useEffect } from 'react';\nimport Leader from '../Leader';\nimport './LeaderBord.scss';\n\nexport const LeadeBord = ({ leaders, loadLeaders }) => {\n  useEffect(\n    () => {\n      loadLeaders();\n    }, [loadLeaders]\n  );\n\n  return (\n    <section className=\"leaders-bord\">\n      <h2 className=\"leaders-bord__heading\">\n                Leader Bord\n      </h2>\n      {leaders.slice(-15).map(\n        leader => <Leader key={leader.id} leader={leader} />\n      )}\n    </section>\n\n  );\n};\n","import { getGameSettingsFromServer } from '../API';\n\nconst SET_PRESETS = 'SET_PRESETS';\n\nexport const getPresets = state => state.presets;\n\nconst setPresets = payload => ({\n  type: SET_PRESETS,\n  payload,\n});\n\nexport const loadPresets = () => (dispatch) => {\n  getGameSettingsFromServer()\n    .then(\n      (settings) => {\n        dispatch(\n          setPresets(settings)\n        );\n      }\n    )\n    .catch()\n    .finally();\n};\n\nexport const PresetsReducer = (state = [], action) => {\n  switch (action.type) {\n    case SET_PRESETS: return action.payload;\n    default: return state;\n  }\n};\n","const SET_GAME_STARTED = 'SET_GAME_STARTED';\n\nexport const getGameStarted = state => state.gameStarted;\n\nexport const setGameStarted = payload => ({\n  type: SET_GAME_STARTED,\n  payload,\n});\n\nexport const StartGameReducer = (state = false, action) => {\n  switch (action.type) {\n    case SET_GAME_STARTED: return action.payload;\n    default: return state;\n  }\n};\n","const UPDATE_NOT_USED_INDEXES = 'UPDATE_NOT_USED_INDEXES';\n\nexport const getNotUsedIndexes = state => state.notUsedIndexes;\n\nexport const updateNotUsedIndexes = payload => ({\n  type: UPDATE_NOT_USED_INDEXES,\n  payload,\n});\n\nexport const NotUsedIndexesReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_NOT_USED_INDEXES: return action.payload;\n    default: return state;\n  }\n};\n","const SET_RANDOM_SQUARE = 'SET_RANDOM_SQUARE';\n\nexport const getActiveRandomSuqare = state => state.activeRandomSquare;\n\nexport const setActiveRandomSquare = payload => ({\n  type: SET_RANDOM_SQUARE,\n  payload,\n});\n\nexport const ActiveRandomSquareReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_RANDOM_SQUARE: return action.payload;\n    default: return state;\n  }\n};\n","const UPDATE_USER_WON_INDEXES = 'UPDATE_USER_WON_INDEXES';\nconst CLEAR_USER_WON_INDEXES = 'CLEAR_USER_WON_INDEXES';\n\nexport const getUserWonIndexes = state => state.userWonIndexes;\n\nexport const updateUserWonIndexes = payload => ({\n  type: UPDATE_USER_WON_INDEXES,\n  payload,\n});\n\nexport const clearUserWonIndexes = payload => ({\n  type: CLEAR_USER_WON_INDEXES,\n  payload,\n});\n\nexport const UserWonIndexesReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_USER_WON_INDEXES: return [...state, action.payload];\n    case CLEAR_USER_WON_INDEXES: return [];\n    default: return state;\n  }\n};\n","const UPDATE_USER_LOST_INDEXES = 'UPDATE_USER_LOST_INDEXES';\nconst CLEAR_USER_LOST_INDEXES = 'CLEAR_USER_LOST_INDEXES';\n\nexport const getUserLostIndexes = state => state.userLostIndexes;\n\nexport const updateUserLostIndexes = payload => ({\n  type: UPDATE_USER_LOST_INDEXES,\n  payload,\n});\n\nexport const clearUserLostIndexes = payload => ({\n  type: CLEAR_USER_LOST_INDEXES,\n  payload,\n});\n\nexport const UserLostIndexesReducer = (state = [], action) => {\n  switch (action.type) {\n    case UPDATE_USER_LOST_INDEXES: return [...state, action.payload];\n    case CLEAR_USER_LOST_INDEXES: return [];\n    default: return state;\n  }\n};\n","const UPDATE_CURRENT_GAME_MODE = 'UPDATE_CURRENT_GAME_MODE';\n\nexport const getCurrentGameMode = state => state.currentGameMode;\n\nexport const setCurrentGameMode = payload => ({\n  type: UPDATE_CURRENT_GAME_MODE,\n  payload,\n});\n\nexport const CurrentGameModeReducer = (state = '', action) => {\n  switch (action.type) {\n    case UPDATE_CURRENT_GAME_MODE: return action.payload;\n    default: return state;\n  }\n};\n","const SET_SHOW_RESULTS = 'SET_SHOW_RESULTS';\n\nexport const getShowResults = state => state.showResults;\n\nexport const setShowResults = payload => ({\n  type: SET_SHOW_RESULTS,\n  payload,\n});\n\nexport const ShowResultsReducer = (state = false, action) => {\n  switch (action.type) {\n    case SET_SHOW_RESULTS: return action.payload;\n    default: return state;\n  }\n};\n","const SET_WINNER = 'SET_WINNER';\n\nexport const getWinner = state => state.winner;\n\nexport const setWinner = payload => ({\n  type: SET_WINNER,\n  payload,\n});\n\nexport const SetWinnerReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_WINNER: return action.payload;\n    default: return state;\n  }\n};\n","const UPDATE_CURRENT_PLAYER = 'UPDATE_CURRENT_PLAYER';\n\nexport const getCurrentPlayer = state => state.currentPlayer;\n\nexport const setCurrentPlayer = payload => ({\n  type: UPDATE_CURRENT_PLAYER,\n  payload,\n});\n\nexport const CurrentPlayerReducer = (state = '', action) => {\n  switch (action.type) {\n    case UPDATE_CURRENT_PLAYER: return action.payload;\n    default: return state;\n  }\n};\n","import { connect } from 'react-redux';\nimport { GameBoard } from './Game-Board';\nimport { getGameStarted, setGameStarted } from '../../store/StartGameReducer';\nimport { getNotUsedIndexes, updateNotUsedIndexes } from '../../store/NotUsedIndexesReducer';\nimport { setActiveRandomSquare, getActiveRandomSuqare } from '../../store/ActiveRandomSquareReducer';\nimport { getUserWonIndexes, updateUserWonIndexes, clearUserWonIndexes } from '../../store/userWonIndexesReducer';\nimport { getUserLostIndexes, updateUserLostIndexes, clearUserLostIndexes } from '../../store/userLostIndexesReducer';\nimport { getCurrentGameMode } from '../../store/CurrentGameModeReducer';\nimport { getPresets } from '../../store/GamePresetsReducer';\nimport { setShowResults } from '../../store/ShowResultsReducer';\nimport { setWinner } from '../../store/SetWinnerReducer';\nimport { getCurrentPlayer } from '../../store/CurrentPlayerReducer';\nimport { sendWinnerInfoToServer } from '../../API';\nimport { loadLeadrs } from '../../store/LeadersReducer';\n\nconst mapStateToProps = state => ({\n  gameStarted: getGameStarted(state),\n  notUsedIndexes: getNotUsedIndexes(state),\n  activeRandomSquare: getActiveRandomSuqare(state),\n  userWonIndexes: getUserWonIndexes(state),\n  userLostIndexes: getUserLostIndexes(state),\n  currentGameMode: getCurrentGameMode(state),\n  presets: getPresets(state),\n  currentPlayer: getCurrentPlayer(state),\n});\n\nconst mapDispatchToProps = {\n  setGameStarted,\n  updateNotUsedIndexes,\n  setActiveRandomSquare,\n  updateUserWonIndexes,\n  updateUserLostIndexes,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n  setShowResults,\n  setWinner,\n  sendWinnerInfoToServer,\n  loadLeadrs,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GameBoard);\n","import React, { useEffect, useMemo } from 'react';\nimport './Game-Board.scss';\nimport classNames from 'classnames';\n\nexport const GameBoard = ({\n  currentGameMode,\n  gameStarted,\n  setGameStarted,\n  notUsedIndexes,\n  updateNotUsedIndexes,\n  setActiveRandomSquare,\n  activeRandomSquare,\n  updateUserWonIndexes,\n  userWonIndexes,\n  updateUserLostIndexes,\n  userLostIndexes,\n  presets,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n  setShowResults,\n  setWinner,\n  currentPlayer,\n  sendWinnerInfoToServer,\n  loadLeadrs,\n}) => {\n  const arrayOfSquares = useMemo(\n    () => {\n      console.log('counting');\n\n      const squares = [];\n\n      for (let i = 0; i < Math.pow(currentGameMode ? presets[currentGameMode].field : 5, 2); i++) {\n        squares.push(i);\n      }\n\n      return squares;\n    },\n    [currentGameMode, presets]\n  );\n\n  useEffect(() => {\n    const indexes = [];\n\n    for (let i = 0; i < Math.pow(currentGameMode ? presets[currentGameMode].field : 5, 2); i++) {\n      indexes.push(i);\n    }\n    updateNotUsedIndexes(indexes);\n  }, [currentGameMode, presets, updateNotUsedIndexes]);\n\n  const getRandom = maxNumber => Math.floor(Math.random() * maxNumber);\n\n  useEffect(() => {\n    let gameProcess;\n\n    console.log('length of not used', notUsedIndexes.length);\n\n    if (gameStarted) {\n      // cheking is game over\n      if (userLostIndexes.length > notUsedIndexes.length / 2\n       || userWonIndexes.length > notUsedIndexes.length / 2\n      ) {\n        setWinner(userWonIndexes.length > userLostIndexes.length ? currentPlayer : 'Computer');\n        clearUserWonIndexes();\n        clearUserLostIndexes();\n        setShowResults(true);\n        setGameStarted(false);\n\n        const date = new Date();\n        const fullDate = date.toLocaleString();\n\n        sendWinnerInfoToServer({\n          winner: userWonIndexes.length > userLostIndexes.length\n            ? currentPlayer : 'Computer',\n          date: fullDate,\n        })\n          .then(() => {\n            loadLeadrs();\n          });\n      }\n\n      const filteredItemsBefore = notUsedIndexes.filter(\n        item => userWonIndexes.indexOf(item) === -1\n        && userLostIndexes.indexOf(item) === -1\n      );\n      const randomBefore = getRandom(filteredItemsBefore.length);\n\n      setActiveRandomSquare(\n        filteredItemsBefore[randomBefore]\n      );\n\n      gameProcess = setInterval(() => {\n        updateUserLostIndexes(filteredItemsBefore[randomBefore]);\n        console.log('userLOOOOST', userLostIndexes);\n\n        console.log(\n          'filtering',\n        );\n\n        const filteredItems = notUsedIndexes.filter(\n          item => userWonIndexes.indexOf(item) === -1\n            && userLostIndexes.indexOf(item) === -1\n        );\n\n        console.log('fileterd items length =', filteredItems.length);\n\n        const random = getRandom(filteredItems.length);\n\n        console.log('random index', random);\n\n        setActiveRandomSquare(\n          filteredItems[random]\n        );\n        console.log('game is going', userWonIndexes);\n      }, currentGameMode ? presets[currentGameMode].delay : 2000);\n    }\n\n    return () => {\n      clearInterval(gameProcess);\n    };\n  }, [gameStarted, userWonIndexes, userLostIndexes, notUsedIndexes, setActiveRandomSquare, currentGameMode, presets, setWinner, currentPlayer, clearUserWonIndexes, clearUserLostIndexes, setShowResults, setGameStarted, sendWinnerInfoToServer, loadLeadrs, updateUserLostIndexes]);\n\n  return (\n    <section\n      style={{\n        gridGap: '0',\n        gridTemplateColumns: `repeat(${currentGameMode ? presets[currentGameMode].field : 5}, 30px)`,\n      }}\n      className=\"game-board\"\n    >\n      {arrayOfSquares.map(\n        (sqare, index) => (\n          <div\n            key={sqare}\n            className={\n              classNames(\n                'game-board__square',\n                {\n                  'active-random': index === activeRandomSquare,\n                  'user-won-square': userWonIndexes.includes(index),\n                  'user-lost-square': userLostIndexes.includes(index),\n                },\n\n              )\n            }\n            onClick={() => {\n              console.log('user click', userWonIndexes);\n\n              if (index === activeRandomSquare) {\n                updateUserWonIndexes(index);\n              }\n            }}\n          />\n        )\n      )}\n    </section>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport './App.scss';\nimport { connect } from 'react-redux';\nimport LeaderBoard from './components/LeaderBord';\nimport { getPresets, loadPresets } from './store/GamePresetsReducer';\nimport GameBoard from './components/Game-Board';\nimport { getCurrentGameMode, setCurrentGameMode } from './store/CurrentGameModeReducer';\nimport { getCurrentPlayer, setCurrentPlayer } from './store/CurrentPlayerReducer';\nimport { setGameStarted } from './store/StartGameReducer';\nimport { setShowResults, getShowResults } from './store/ShowResultsReducer';\nimport { getWinner } from './store/SetWinnerReducer';\nimport { clearUserLostIndexes } from './store/userLostIndexesReducer';\nimport { clearUserWonIndexes } from './store/userWonIndexesReducer';\n\nfunction App({\n  loadPresets,\n  presets,\n  currentGameMode,\n  setCurrentGameMode,\n  currentPlayer,\n  setCurrentPlayer,\n  setGameStarted,\n  setShowResults,\n  showResults,\n  winner,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n}) {\n  useEffect(() => {\n    loadPresets();\n  }, [loadPresets]);\n\n  const handleGameModeChange = (event) => {\n    setGameStarted(false);\n    clearUserWonIndexes();\n    clearUserLostIndexes();\n    console.log(event.target.value);\n    setCurrentGameMode(event.target.value);\n  };\n\n  const handleCurrentPlayerInput = (event) => {\n    setCurrentPlayer(event.target.value);\n  };\n\n  const selectRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const handleStartGame = (event) => {\n    setShowResults(false);\n    clearUserWonIndexes();\n    clearUserLostIndexes();\n\n    if (currentGameMode === '') {\n      selectRef.current.focus();\n\n      return;\n    }\n\n    if (currentPlayer === '') {\n      inputRef.current.focus();\n\n      return;\n    }\n    setGameStarted(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <section className=\"game-section\">\n        <div className=\"game-section__select-game-parameters\">\n          <select\n            ref={selectRef}\n            onChange={handleGameModeChange}\n            value={currentGameMode}\n            className=\"game-section__select-game-mode\"\n            required\n          >\n            <option value=\"\">Pick game mode</option>\n            {Object.keys(presets).map(\n              key => (\n                <option value={key}>\n                  {{\n                    easyMode: 'Easy Mode',\n                    normalMode: 'Normal Mode',\n                    hardMode: 'Hard Mode',\n                  }[key]}\n                </option>\n              )\n            )\n            }\n          </select>\n\n          <input\n            ref={inputRef}\n            className=\"game-section__input-player-name\"\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={currentPlayer}\n            onChange={handleCurrentPlayerInput}\n          />\n\n          <button\n            className=\"game-section__play-button\"\n            onClick={handleStartGame}\n          >\n            {winner ? 'PLAY AGAIN' : 'PLAY'}\n          </button>\n\n          {\n            showResults\n              && (\n                <div\n                  className=\"game-section__results\"\n                >\n                  {winner}\n                  {' '}\nwon!\n                </div>\n              )\n          }\n\n        </div>\n\n        <GameBoard />\n\n      </section>\n      <LeaderBoard />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  presets: getPresets(state),\n  currentGameMode: getCurrentGameMode(state),\n  currentPlayer: getCurrentPlayer(state),\n  showResults: getShowResults(state),\n  winner: getWinner(state),\n});\n\nconst mapDispatchToProps = {\n  loadPresets,\n  setCurrentGameMode,\n  setCurrentPlayer,\n  setGameStarted,\n  setShowResults,\n  clearUserWonIndexes,\n  clearUserLostIndexes,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { LeadersReducer } from './LeadersReducer';\nimport { PresetsReducer } from './GamePresetsReducer';\nimport { CurrentGameModeReducer } from './CurrentGameModeReducer';\nimport { CurrentPlayerReducer } from './CurrentPlayerReducer';\nimport { UserWonIndexesReducer } from './userWonIndexesReducer';\nimport { UserLostIndexesReducer } from './userLostIndexesReducer';\nimport { StartGameReducer } from './StartGameReducer';\nimport { ActiveRandomSquareReducer } from './ActiveRandomSquareReducer';\nimport { NotUsedIndexesReducer } from './NotUsedIndexesReducer';\nimport { ShowResultsReducer } from './ShowResultsReducer';\nimport { SetWinnerReducer } from './SetWinnerReducer';\n\nconst rootReducer = combineReducers({\n  leaders: LeadersReducer,\n  presets: PresetsReducer,\n  currentGameMode: CurrentGameModeReducer,\n  currentPlayer: CurrentPlayerReducer,\n  userWonIndexes: UserWonIndexesReducer,\n  userLostIndexes: UserLostIndexesReducer,\n  gameStarted: StartGameReducer,\n  activeRandomSquare: ActiveRandomSquareReducer,\n  notUsedIndexes: NotUsedIndexesReducer,\n  showResults: ShowResultsReducer,\n  winner: SetWinnerReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}